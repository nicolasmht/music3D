webpackJsonp([0],[function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),r=function(){function e(){i(this,e),this.request=new XMLHttpRequest,this.ctx=new(window.AudioContext||window.webkitAudioContext),this.analyser=this.ctx.createAnalyser(),this.analyser.fftSize=2048,this.source=0,this.datasFrequency=new Float32Array(2048),this.datasBits=new Uint8Array(this.analyser.frequencyBinCount),this.averages={lowBass:0,bass:0,inferiorMedium:0,medium:0,superiorMedium:0,acute:0,superiorAcute:0,global:0}}return a(e,[{key:"load",value:function(e){var n=this;return new Promise(function(t,i){n.request.open("GET",e,!0),n.request.responseType="arraybuffer",n.source=n.ctx.createBufferSource(),n.request.addEventListener("load",function(){var e=n.request.response;n.ctx.decodeAudioData(e,function(e){n.source.buffer=e,n.source.connect(n.ctx.destination),n.source.connect(n.analyser);!function e(){n.analyser.getByteFrequencyData(n.datasBits),n.averages.lowBass=n.datasBits[0]/255;for(var t=1;t<=5;++t)n.averages.bass+=n.datasBits[t];n.averages.bass=n.averages.bass/1275;for(var i=6;i<=15;++i)n.averages.inferiorMedium+=n.datasBits[i];n.averages.inferiorMedium=n.averages.inferiorMedium/2295;for(var a=16;a<=85;++a)n.averages.medium+=n.datasBits[a];n.averages.medium=n.averages.medium/17595;for(var r=86;r<=341;++r)n.averages.superiorMedium+=n.datasBits[r];n.averages.superiorMedium=n.averages.superiorMedium/65025;for(var o=342;o<=512;++o)n.averages.acute+=n.datasBits[o];n.averages.acute=n.averages.acute/43605;for(var s=513;s<=939;++s)n.averages.superiorAcute+=n.datasBits[s];n.averages.superiorAcute=n.averages.superiorAcute/108885;for(var u=0;u<=1023;++u)n.averages.global+=n.datasBits[u];n.averages.global=n.averages.global/260865,window.requestAnimationFrame(e)}(),t(!0)})}),n.request.send()})}},{key:"start",value:function(){this.source.start(0)}},{key:"stop",value:function(){this.source.stop(0)}},{key:"getDuration",value:function(){return Math.round(this.source.buffer.duration)}},{key:"setLoop",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.source.loop=e}},{key:"getDatasAudio",value:function(){return this.averages}}]),e}();n.default=r},,function(e,n,t){"use strict";(function(e){function i(e){return e&&e.__esModule?e:{default:e}}function a(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=t(9),s=i(o),u=t(8),c=i(u);t(7);var l=t(6),d=i(l),v=t(5),f=i(v),m=t(0),p=i(m),y=(t(0),function(){function n(){var t=this;a(this,n),this.container=document.querySelector("#main"),document.body.appendChild(this.container),this.scene=new e.Scene,this.camera=new e.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.1,20),this.camera.position.y=1,this.audioAnalyser=new p.default,this.audioAnalyser.load(f.default).then(function(e){t.audioAnalyser.start(),t.renderer.animate(t.render.bind(t))});new e.GridHelper(10,10);this.time=Date.now(),this.lastTime=this.time,this.currentTime=0,this.noise=new d.default,this.createParticles(),this.renderer=new e.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.container.appendChild(this.renderer.domElement),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.onWindowResize()}return r(n,[{key:"createParticles",value:function(){for(var n=new e.BufferGeometry,t=[],i=[],a=new e.Color,r=0;r<20;r+=.05)for(var o=0;o<20;o+=.02){var u=-10+o,l=-10+r;t.push(u,0,l);var d=(Math.random(),Math.random()),v=Math.random(),f=Math.random();a.setRGB(d,v,f),i.push(a.r,a.g,a.b)}var m=new e.ShaderMaterial({uniforms:{u_amplitude:{value:0},u_time:{value:0},u_size:{type:"f",value:2}},vertexShader:s.default,fragmentShader:c.default});n.addAttribute("position",new e.Float32BufferAttribute(t,3)),n.addAttribute("color",new e.Float32BufferAttribute(i,3)),this.particleSystem=new e.Points(n,m),this.scene.add(this.particleSystem)}},{key:"render",value:function(){this.time=Date.now()/1e5,this.currentTime=Date.now()-this.lastTime,this.particleSystem.material.uniforms.u_time.value=this.currentTime;this.audioAnalyser.getDatasAudio().global,this.audioAnalyser.getDatasAudio().bass,this.audioAnalyser.getDatasAudio().acute;this.particleSystem.material.uniforms.u_amplitude.value=this.audioAnalyser.getDatasAudio().bass,this.particleSystem.rotation.y=Math.cos(3e-4*this.currentTime),this.camera.position.y=Math.sin(3e-4*this.currentTime),this.renderer.render(this.scene,this.camera)}},{key:"onWindowResize",value:function(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}}]),n}());n.default=y}).call(n,t(1))},function(e,n){},function(e,n,t){"use strict";t(3);var i=t(2),a=function(e){return e&&e.__esModule?e:{default:e}}(i);window.app=new a.default},function(e,n,t){e.exports=t.p+"music/coldplay.ed35f6ebc49e56a50737abac365ca057.mp3"},,,function(e,n){e.exports="// Varying\nvarying vec4 v_color;\n\nvarying float v_amplitude;\nvarying float v_x;\nvarying float v_y;\nvarying float v_z;\n\n// Uniforms\nuniform float u_time;\nuniform vec3 u_color;\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvoid main() {\n\n    // if (v_y > .2) {\n\n    //     gl_FragColor = vec4(1, 0, 0, 1);\n\n    // } else {\n\n    //     gl_FragColor = vec4(0, 0, 1, 1);\n        \n    // }\n\n    float speedOfChangeColor = 0.001;\n\n    if (u_time > 32200.0) {\n        speedOfChangeColor = 0.005;\n    }\n\n    float base = (v_x * v_y * v_z);\n\n    // float v = v_y + sin(u_time * speedOfChangeColor) * v_amplitude;\n    // float b = v_y + cos(u_time * speedOfChangeColor) * v_amplitude;\n    // float r = v_y + (sin(u_time * speedOfChangeColor) + cos(u_time * speedOfChangeColor)) * v_amplitude;\n\n    float v = v_y + sin(u_time * speedOfChangeColor) * v_amplitude;\n    float b = v_y + cos(u_time * speedOfChangeColor) * v_amplitude;\n    float r = v_y + (sin(u_time * speedOfChangeColor) + cos(u_time * speedOfChangeColor)) * v_amplitude;\n\n    // if (u_time < 2000.0) {\n\n    //     r = 1.0;\n    //     v = 1.0;\n    //     b = 1.0;\n\n    //     //amplitudeModified = u_amplitude * 4.0;\n\n    // } else {\n\n    //     r = sin(u_time * 0.001) * v_amplitude;\n    //     v = cos(u_time * 0.001) * v_amplitude;\n    //     b = sin(u_time * 0.001) * v_amplitude;\n\n    //     //amplitudeModified = u_amplitude * 1.0;\n\n    // }\n\n    gl_FragColor = vec4(r, v, b, 1.0);\n\n    //gl_FragColor = v_color;\n}"},function(e,n){e.exports="uniform float u_amplitude;\nuniform float u_time;\nuniform float u_size;\n\nattribute vec3 color;\nvarying vec4 v_color;\n\n// Varyings\nvarying float v_amplitude;\nvarying float v_x;\nvarying float v_y;\nvarying float v_z;\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\nvoid main() {\n\n  float amplitudeModified = 3.0;\n\n  if (u_time > 32200.0) {\n\n    amplitudeModified = u_amplitude * 3.0;\n\n  } else {\n\n    amplitudeModified = u_amplitude * 1.0;\n\n  }\n\n  float y = position.y + snoise(vec3(position.x, position.z, u_time * 0.001)) * (u_amplitude * amplitudeModified);\n\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, y, position.z, 1);\n\n  gl_PointSize = u_size;\n\n    //gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n\n    v_amplitude = u_amplitude;\n\n    v_color = vec4(color, 1);\n    v_x = position.x;\n    v_y = y;\n    v_z = position.z;\n\n    //vColor = gl_Position * 0.5 + 0.5;\n    /*\n    x = gl_Position.x;\n    y = gl_Position.y;\n    z = gl_Position.z;\n    */\n}"}],[4]);